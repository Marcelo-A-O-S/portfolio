generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  likes         Like[]
  comments      Comment[]
  posts         Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String
  keywords    String
  content     String
  tools       Tools[]
  imageUrl    String
  types       BlogType[]
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Categories  Category[]
  likes       Like[]
  comments    Comment[]
  links       Link[]
}

model Category {
  id            String        @id @default(cuid())
  name          String
  SubCategories SubCategory[]
  Posts         Post[]
}

model SubCategory {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Tools {
  id          String  @id @default(cuid())
  name        String
  description String?
  posts       Post[]
}

model BlogType {
  id          String @id @default(cuid())
  name        String @unique
  posts       Post[]
}
model LinkType {
  id          String @id @default(cuid())
  name        String @unique
  links       Link[]
}

model Link {
  id      String   @id @default(cuid())
  linkTypeId String
  content String
  linkType LinkType @relation (fields: [linkTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posts Post[]
}
